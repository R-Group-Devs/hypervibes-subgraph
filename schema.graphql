type Realm @entity {
  id: ID!
  name: String!
  description: String!
  creator: Account!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransactionHash: String!
  modifiedAtBlock: BigInt!
  modifiedAtTimestamp: BigInt!

  token: String!
  dailyRate: BigInt!

  # constraints

  minInfusionAmount: BigInt!
  maxInfusionAmount: BigInt!
  maxTokenBalance: BigInt!
  minClaimAmount: BigInt!
  requireNftIsOwned: Boolean!
  allowMultiInfuse: Boolean!
  allowPublicInfusion: Boolean!
  allowAllCollections: Boolean!

  # relationships

  realmAdmins: [RealmAdmin!]! @derivedFrom(field: "realm")
  realmInfusers: [RealmInfuser!]! @derivedFrom(field: "realm")
  realmCollections: [RealmCollection!]! @derivedFrom(field: "realm")
  infusions: [Infusion!]! @derivedFrom(field: "realm")
}

type Account @entity {
  id: ID!
  address: String!
  realmAdmins: [RealmAdmin!]! @derivedFrom(field: "account")
  realmInfusers: [RealmInfuser!]! @derivedFrom(field: "account")
  createdRealms: [Realm!]! @derivedFrom(field: "creator")
  infusionEventsAsMsgSender: [InfusionEvent!]! @derivedFrom(field: "msgSender")
  infusionEventsAsTarget: [InfusionEvent!]! @derivedFrom(field: "target")
  infusionProxiesAsProxy: [InfusionProxy!]! @derivedFrom(field: "proxy")
  infusionProxiesAsInfuser: [InfusionProxy!]! @derivedFrom(field: "infuser")
}

type NFT @entity {
  id: ID!
  tokenId: BigInt!
  collection: Collection!
  infusions: [Infusion!]! @derivedFrom(field: "nft")
}

type Collection @entity {
  id: ID!
  address: String!
  nfts: [NFT!]! @derivedFrom(field: "collection")
  realmCollections: [RealmCollection!]! @derivedFrom(field: "collection")
}

type RealmAdmin @entity {
  id: ID!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransactionHash: String!
  account: Account!
  realm: Realm!
}

type RealmInfuser @entity {
  id: ID!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransactionHash: String!
  account: Account!
  realm: Realm!
}

type RealmCollection @entity {
  id: ID!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransactionHash: String!
  collection: Collection!
  realm: Realm!
}

type Infusion @entity {
  id: ID!
  realm: Realm!
  nft: NFT!
  balance: BigInt!
  lastClaimAtTimestamp: BigInt!
  events: [InfusionEvent!]! @derivedFrom(field: "infusion")
}

enum InfusionEventType {
  CLAIM
  INFUSE
}

type InfusionEvent @entity {
  id: ID!
  infusion: Infusion!
  eventType: InfusionEventType!
  msgSender: Account!
  target: Account!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransactionHash: String!
  amount: BigInt!
  comment: String
}

type InfusionProxy @entity {
  id: ID!
  realm: Realm!
  proxy: Account!
  infuser: Account!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  createdAtTransactionHash: String!
}

type _Schema_ @fulltext(
  name: "realmSearch"
  language: en
  algorithm: rank
  include: [{
    entity: "Realm",
    fields: [{ name: "name" }, { name: "description" }]
  }]
)
